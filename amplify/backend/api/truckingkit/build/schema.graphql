type Company {
  city: String!
  companyName: String!
  dotNumber: String!
  state: String!
  streetAddress: String!
  users(filter: ModelUserFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelUserConnection
  zipCode: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type User {
  company: Company
  email: String!
  firstName: String!
  lastName: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  companyUsersDotNumber: String
  owner: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelCompanyConnection {
  items: [Company]!
  nextToken: String
}

input ModelCompanyFilterInput {
  city: ModelStringInput
  companyName: ModelStringInput
  dotNumber: ModelStringInput
  state: ModelStringInput
  streetAddress: ModelStringInput
  zipCode: ModelIntInput
  and: [ModelCompanyFilterInput]
  or: [ModelCompanyFilterInput]
  not: ModelCompanyFilterInput
}

type Query {
  getCompany(dotNumber: String!): Company
  listCompanies(dotNumber: String, filter: ModelCompanyFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelCompanyConnection
  getUser(email: String!): User
  listUsers(email: String, filter: ModelUserFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelUserConnection
}

input ModelCompanyConditionInput {
  city: ModelStringInput
  companyName: ModelStringInput
  state: ModelStringInput
  streetAddress: ModelStringInput
  zipCode: ModelIntInput
  and: [ModelCompanyConditionInput]
  or: [ModelCompanyConditionInput]
  not: ModelCompanyConditionInput
}

input CreateCompanyInput {
  city: String!
  companyName: String!
  dotNumber: String!
  state: String!
  streetAddress: String!
  zipCode: Int!
}

input UpdateCompanyInput {
  city: String
  companyName: String
  dotNumber: String!
  state: String
  streetAddress: String
  zipCode: Int
}

input DeleteCompanyInput {
  dotNumber: String!
}

type Mutation {
  createCompany(input: CreateCompanyInput!, condition: ModelCompanyConditionInput): Company
  updateCompany(input: UpdateCompanyInput!, condition: ModelCompanyConditionInput): Company
  deleteCompany(input: DeleteCompanyInput!, condition: ModelCompanyConditionInput): Company
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
}

input ModelSubscriptionCompanyFilterInput {
  city: ModelSubscriptionStringInput
  companyName: ModelSubscriptionStringInput
  dotNumber: ModelSubscriptionStringInput
  state: ModelSubscriptionStringInput
  streetAddress: ModelSubscriptionStringInput
  zipCode: ModelSubscriptionIntInput
  and: [ModelSubscriptionCompanyFilterInput]
  or: [ModelSubscriptionCompanyFilterInput]
}

type Subscription {
  onCreateCompany(filter: ModelSubscriptionCompanyFilterInput, owner: String): Company @aws_subscribe(mutations: ["createCompany"])
  onUpdateCompany(filter: ModelSubscriptionCompanyFilterInput, owner: String): Company @aws_subscribe(mutations: ["updateCompany"])
  onDeleteCompany(filter: ModelSubscriptionCompanyFilterInput, owner: String): Company @aws_subscribe(mutations: ["deleteCompany"])
  onCreateUser(filter: ModelSubscriptionUserFilterInput, owner: String): User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser(filter: ModelSubscriptionUserFilterInput, owner: String): User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser(filter: ModelSubscriptionUserFilterInput, owner: String): User @aws_subscribe(mutations: ["deleteUser"])
}

type ModelUserConnection {
  items: [User]!
  nextToken: String
}

input ModelUserFilterInput {
  email: ModelStringInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
  companyUsersDotNumber: ModelStringInput
}

input ModelUserConditionInput {
  firstName: ModelStringInput
  lastName: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
  companyUsersDotNumber: ModelStringInput
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  companyUsersDotNumber: String
}

input UpdateUserInput {
  email: String!
  firstName: String
  lastName: String
  companyUsersDotNumber: String
}

input DeleteUserInput {
  email: String!
}

input ModelSubscriptionUserFilterInput {
  email: ModelSubscriptionStringInput
  firstName: ModelSubscriptionStringInput
  lastName: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserFilterInput]
  or: [ModelSubscriptionUserFilterInput]
}
